{"ast":null,"code":"import { generateExpression } from \"math-expression-generator\";\nexport const isInputExpComputable = exp => {\n  var tokenList1 = [];\n  var tokenList2 = [];\n  var token = \"\";\n  var op = \"\";\n\n  for (var i = 0; i < exp.length; ++i) {\n    if (exp[i] == '+' || exp[i] == '-' || exp[i] == '*' || exp[i] == '/' || exp[i] == '=') {\n      tokenList1.push(token);\n      token = \"\";\n      op = exp[i];\n      if (op != \"=\") tokenList1.push(op);\n    } else {\n      token += exp[i];\n    }\n  }\n\n  tokenList2.push(token);\n  var comExp = eval(tokenList1.join(\" \"));\n  if (comExp == tokenList2) return true;else return false;\n};\nexport const isWinningExp = exp => {\n  return esolution === exp;\n};\nexport const getProblem = () => {\n  // January 1, 2022 Game Epoch\n  const epochMs = new Date('January 1, 2022 00:00:00').valueOf();\n  const now = Date.now();\n  const msInDay = 1; //86400000\n\n  const index = Math.floor((now - epochMs) / msInDay);\n  const nextday = (index + 1) * msInDay + epochMs;\n  var restr = '';\n\n  while (restr.length != 8) {\n    const expression = generateExpression({\n      target: Math.floor(Math.random() * (99 - 10 + 1) + 10),\n      length: 2\n    });\n    var expLen = expression[0].toString().length + 1 + expression[2].toString().length;\n    const result = eval(expression.join(\" \"));\n    restr = expression[0].toString() + expression[1] + expression[2].toString() + \"=\" + result.toString();\n  }\n\n  return {\n    esolution: restr,\n    solutionIndex: index,\n    tomorrow: nextday\n  };\n};\nexport const {\n  esolution,\n  solutionIndex,\n  tomorrow\n} = getProblem();","map":{"version":3,"sources":["/Users/AdityaAgarwal/Documents/nerdle/mewP/benesse-int-app/src/lib/nerdexp.ts"],"names":["generateExpression","isInputExpComputable","exp","tokenList1","tokenList2","token","op","i","length","push","comExp","eval","join","isWinningExp","esolution","getProblem","epochMs","Date","valueOf","now","msInDay","index","Math","floor","nextday","restr","expression","target","random","expLen","toString","result","solutionIndex","tomorrow"],"mappings":"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","sourcesContent":["import { generateExpression } from \"math-expression-generator\";\n\n\nexport const isInputExpComputable = (exp: string) => {\n    var tokenList1 = [];\n    var tokenList2 = [];\n    var token = \"\";\n    var op = \"\";\n    for (var i = 0; i < exp.length; ++i) {\n        if ((exp[i]=='+')||(exp[i]=='-')||(exp[i]=='*')||(exp[i]=='/')||(exp[i]=='=')) {\n            tokenList1.push(token);\n            token = \"\";\n            op = exp[i];\n            if(op != \"=\")\n            tokenList1.push(op);\n        } else {\n            token += exp[i];\n        }\n    }\n    tokenList2.push(token);\n    var comExp = eval(tokenList1.join(\" \"));\n\n    if(comExp == tokenList2)\n      return true\n    else\n      return false\n}\n\nexport const isWinningExp = (exp: string) => {\n  return esolution === exp\n}\n\nexport const getProblem = () => {\n  // January 1, 2022 Game Epoch\n  const epochMs = new Date('January 1, 2022 00:00:00').valueOf()\n  const now = Date.now()\n  const msInDay = 1 //86400000\n  const index = Math.floor((now - epochMs) / msInDay)\n  const nextday = (index + 1) * msInDay + epochMs\n\n    var restr  = ''\n    while(restr.length != 8){\n    const expression = generateExpression({\n    target : Math.floor(Math.random() * (99 - 10 + 1) + 10),\n    length: 2,\n   });\n   var expLen = (expression[0].toString()).length + 1 + (expression[2].toString()).length;\n   const result = eval(expression.join(\" \"));\n\n    restr = expression[0].toString() + expression[1] + expression[2].toString() + \"=\" + result.toString();\n\n}\n  return {\n    esolution : restr,\n    solutionIndex: index,\n    tomorrow: nextday,\n  }\n}\n\nexport const { esolution, solutionIndex, tomorrow } = getProblem()\n"]},"metadata":{},"sourceType":"module"}