{"ast":null,"code":"var _jsxFileName = \"/Users/AdityaAgarwal/Documents/nerdle/mewP/benesse-int-app/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { InformationCircleIcon } from '@heroicons/react/outline';\nimport { useState, useEffect } from 'react';\nimport { Alert } from './components/alerts/Alert';\nimport { Grid } from './components/grid/Grid';\nimport { Keyboard } from './components/keyboard/Keyboard';\nimport { AboutModal } from './components/modals/AboutModal';\nimport { InfoModal } from './components/modals/InfoModal';\nimport { StatsModal } from './components/modals/StatsModal';\nimport { GAME_TITLE, WIN_MESSAGES, GAME_COPIED_MESSAGE, ABOUT_GAME_MESSAGE, NOT_ENOUGH_LETTERS_MESSAGE, WORD_NOT_FOUND_MESSAGE, CORRECT_WORD_MESSAGE } from './constants/strings';\nimport { MAX_WORD_LENGTH, MAX_CHALLENGES, ALERT_TIME_MS, REVEAL_TIME_MS, GAME_LOST_INFO_DELAY } from './constants/settings';\nimport { isInputExpComputable, isWinningExp, esolution } from './lib/nerdexp';\nimport { addStatsForCompletedGame, loadStats } from './lib/stats';\nimport { loadGameStateFromLocalStorage, saveGameStateToLocalStorage } from './lib/localStorage';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [isGameWon, setIsGameWon] = useState(false);\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false);\n  const [isAboutModalOpen, setIsAboutModalOpen] = useState(false);\n  const [isNotEnoughLetters, setIsNotEnoughLetters] = useState(false);\n  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false);\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false);\n  const [isWordNotFoundAlertOpen, setIsWordNotFoundAlertOpen] = useState(false);\n  const [isGameLost, setIsGameLost] = useState(false);\n  const [isDarkMode, setIsDarkMode] = useState(localStorage.getItem('theme') ? localStorage.getItem('theme') === 'dark' : prefersDarkMode ? true : false);\n  const [successAlert, setSuccessAlert] = useState('');\n  const [isRevealing, setIsRevealing] = useState(false);\n  const [guesses, setGuesses] = useState(() => {\n    const loaded = loadGameStateFromLocalStorage();\n\n    if ((loaded === null || loaded === void 0 ? void 0 : loaded.esolution) !== esolution) {\n      return [];\n    }\n\n    const gameWasWon = loaded.guesses.includes(esolution);\n\n    if (gameWasWon) {\n      setIsGameWon(true);\n    }\n\n    if (loaded.guesses.length === MAX_CHALLENGES && !gameWasWon) {\n      setIsGameLost(true);\n    }\n\n    return loaded.guesses;\n  });\n  const [stats, setStats] = useState(() => loadStats());\n  /*\n    const [isHardMode, setIsHardMode] = useState(\n      localStorage.getItem('gameMode')\n        ? localStorage.getItem('gameMode') === 'hard'\n        : false\n    )\n    */\n\n  const [isMissingPreviousLetters, setIsMissingPreviousLetters] = useState(false);\n  const [missingLetterMessage, setIsMissingLetterMessage] = useState('');\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [isDarkMode]);\n\n  const handleDarkMode = isDark => {\n    setIsDarkMode(isDark);\n    localStorage.setItem('theme', isDark ? 'dark' : 'light');\n  };\n  /*\n    const handleHardMode = (isHard: boolean) => {\n      setIsHardMode(isHard)\n      localStorage.setItem('gameMode', isHard ? 'hard' : 'normal')\n    }\n  */\n\n\n  useEffect(() => {\n    saveGameStateToLocalStorage({\n      guesses,\n      esolution\n    });\n  }, [guesses]);\n  useEffect(() => {\n    if (isGameWon) {\n      setTimeout(() => {\n        setSuccessAlert(WIN_MESSAGES[Math.floor(Math.random() * WIN_MESSAGES.length)]);\n        setTimeout(() => {\n          setSuccessAlert('');\n          setIsStatsModalOpen(true);\n        }, ALERT_TIME_MS);\n      }, REVEAL_TIME_MS * MAX_WORD_LENGTH);\n    }\n\n    if (isGameLost) {\n      setTimeout(() => {\n        setIsStatsModalOpen(true);\n      }, GAME_LOST_INFO_DELAY);\n    }\n  }, [isGameWon, isGameLost]);\n\n  const onChar = value => {\n    if (currentGuess.length < MAX_WORD_LENGTH && guesses.length < MAX_CHALLENGES && !isGameWon) {\n      setCurrentGuess(`${currentGuess}${value}`);\n    }\n  };\n\n  const onDelete = () => {\n    setCurrentGuess(currentGuess.slice(0, -1));\n  };\n\n  const onEnter = () => {\n    if (isGameWon || isGameLost) {\n      return;\n    }\n\n    if (!(currentGuess.length === MAX_WORD_LENGTH)) {\n      setIsNotEnoughLetters(true);\n      return setTimeout(() => {\n        setIsNotEnoughLetters(false);\n      }, ALERT_TIME_MS);\n    }\n\n    if (!isInputExpComputable(currentGuess)) {\n      setIsWordNotFoundAlertOpen(true);\n      return setTimeout(() => {\n        setIsWordNotFoundAlertOpen(false);\n      }, ALERT_TIME_MS);\n    }\n    /*\n    // enforce hard mode - all guesses must contain all previously revealed letters\n    if (isHardMode) {\n      const firstMissingReveal = findFirstUnusedReveal(currentGuess, guesses)\n      if (firstMissingReveal) {\n        setIsMissingLetterMessage(firstMissingReveal)\n        setIsMissingPreviousLetters(true)\n        return setTimeout(() => {\n          setIsMissingPreviousLetters(false)\n        }, ALERT_TIME_MS)\n      }\n    }\n    */\n\n\n    setIsRevealing(true); // turn this back off after all\n    // chars have been revealed\n\n    setTimeout(() => {\n      setIsRevealing(false);\n    }, REVEAL_TIME_MS * MAX_WORD_LENGTH);\n    const winningWord = isWinningExp(currentGuess);\n\n    if (currentGuess.length === MAX_WORD_LENGTH && guesses.length < MAX_CHALLENGES && !isGameWon) {\n      setGuesses([...guesses, currentGuess]);\n      setCurrentGuess('');\n\n      if (winningWord) {\n        setStats(addStatsForCompletedGame(stats, guesses.length));\n        return setIsGameWon(true);\n      }\n\n      if (guesses.length === MAX_CHALLENGES - 1) {\n        setStats(addStatsForCompletedGame(stats, guesses.length + 1));\n        setIsGameLost(true);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pt-2 pb-8 max-w-7xl mx-auto sm:px-6 lg:px-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex w-80 mx-auto items-center mb-8 mt-20\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-xl ml-2.5 grow font-bold dark:text-white\",\n        children: GAME_TITLE\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InformationCircleIcon, {\n        className: \"h-6 w-6 mr-2 cursor-pointer dark:stroke-white\",\n        onClick: () => setIsInfoModalOpen(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      guesses: guesses,\n      currentGuess: currentGuess,\n      isRevealing: isRevealing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n      onChar: onChar,\n      onDelete: onDelete,\n      onEnter: onEnter,\n      guesses: guesses,\n      isRevealing: isRevealing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfoModal, {\n      isOpen: isInfoModalOpen,\n      handleClose: () => setIsInfoModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatsModal, {\n      isOpen: isStatsModalOpen,\n      handleClose: () => setIsStatsModalOpen(false),\n      guesses: guesses,\n      gameStats: stats,\n      isGameLost: isGameLost,\n      isGameWon: isGameWon,\n      handleShare: () => {\n        setSuccessAlert(GAME_COPIED_MESSAGE);\n        return setTimeout(() => setSuccessAlert(''), ALERT_TIME_MS);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AboutModal, {\n      isOpen: isAboutModalOpen,\n      handleClose: () => setIsAboutModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"mx-auto mt-8 flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 select-none\",\n      onClick: () => setIsAboutModalOpen(true),\n      children: ABOUT_GAME_MESSAGE\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: NOT_ENOUGH_LETTERS_MESSAGE,\n      isOpen: isNotEnoughLetters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: WORD_NOT_FOUND_MESSAGE,\n      isOpen: isWordNotFoundAlertOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: missingLetterMessage,\n      isOpen: isMissingPreviousLetters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: CORRECT_WORD_MESSAGE(esolution),\n      isOpen: isGameLost && !isRevealing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: successAlert,\n      isOpen: successAlert !== '',\n      variant: \"success\",\n      topMost: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"uB1eMO+sJ/gqFgVYD1zJFWBSAxc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/AdityaAgarwal/Documents/nerdle/mewP/benesse-int-app/src/App.tsx"],"names":["InformationCircleIcon","useState","useEffect","Alert","Grid","Keyboard","AboutModal","InfoModal","StatsModal","GAME_TITLE","WIN_MESSAGES","GAME_COPIED_MESSAGE","ABOUT_GAME_MESSAGE","NOT_ENOUGH_LETTERS_MESSAGE","WORD_NOT_FOUND_MESSAGE","CORRECT_WORD_MESSAGE","MAX_WORD_LENGTH","MAX_CHALLENGES","ALERT_TIME_MS","REVEAL_TIME_MS","GAME_LOST_INFO_DELAY","isInputExpComputable","isWinningExp","esolution","addStatsForCompletedGame","loadStats","loadGameStateFromLocalStorage","saveGameStateToLocalStorage","App","prefersDarkMode","window","matchMedia","matches","currentGuess","setCurrentGuess","isGameWon","setIsGameWon","isInfoModalOpen","setIsInfoModalOpen","isAboutModalOpen","setIsAboutModalOpen","isNotEnoughLetters","setIsNotEnoughLetters","isStatsModalOpen","setIsStatsModalOpen","isSettingsModalOpen","setIsSettingsModalOpen","isWordNotFoundAlertOpen","setIsWordNotFoundAlertOpen","isGameLost","setIsGameLost","isDarkMode","setIsDarkMode","localStorage","getItem","successAlert","setSuccessAlert","isRevealing","setIsRevealing","guesses","setGuesses","loaded","gameWasWon","includes","length","stats","setStats","isMissingPreviousLetters","setIsMissingPreviousLetters","missingLetterMessage","setIsMissingLetterMessage","document","documentElement","classList","add","remove","handleDarkMode","isDark","setItem","setTimeout","Math","floor","random","onChar","value","onDelete","slice","onEnter","winningWord"],"mappings":"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","sourcesContent":["import {\n  InformationCircleIcon,\n  ChartBarIcon,\n  CogIcon,\n} from '@heroicons/react/outline'\n\nimport { useState, useEffect } from 'react'\nimport { Alert } from './components/alerts/Alert'\nimport { Grid } from './components/grid/Grid'\nimport { Keyboard } from './components/keyboard/Keyboard'\nimport { AboutModal } from './components/modals/AboutModal'\nimport { InfoModal } from './components/modals/InfoModal'\nimport { StatsModal } from './components/modals/StatsModal'\nimport { SettingsModal } from './components/modals/SettingsModal'\nimport {\n  GAME_TITLE,\n  WIN_MESSAGES,\n  GAME_COPIED_MESSAGE,\n  ABOUT_GAME_MESSAGE,\n  NOT_ENOUGH_LETTERS_MESSAGE,\n  WORD_NOT_FOUND_MESSAGE,\n  CORRECT_WORD_MESSAGE,\n} from './constants/strings'\nimport {\n  MAX_WORD_LENGTH,\n  MAX_CHALLENGES,\n  ALERT_TIME_MS,\n  REVEAL_TIME_MS,\n  GAME_LOST_INFO_DELAY,\n} from './constants/settings'\n\nimport {\n   isInputExpComputable,\n   isWinningExp,\n   esolution,\n} from './lib/nerdexp'\nimport { addStatsForCompletedGame, loadStats } from './lib/stats'\nimport {\n  loadGameStateFromLocalStorage,\n  saveGameStateToLocalStorage,\n} from './lib/localStorage'\n\nimport './App.css'\n\nfunction App() {\n\n  const prefersDarkMode = window.matchMedia(\n    '(prefers-color-scheme: dark)'\n  ).matches\n\n\n\n  const [currentGuess, setCurrentGuess] = useState('')\n  const [isGameWon, setIsGameWon] = useState(false)\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false)\n  const [isAboutModalOpen, setIsAboutModalOpen] = useState(false)\n  const [isNotEnoughLetters, setIsNotEnoughLetters] = useState(false)\n  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false)\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false)\n  const [isWordNotFoundAlertOpen, setIsWordNotFoundAlertOpen] = useState(false)\n  const [isGameLost, setIsGameLost] = useState(false)\n  const [isDarkMode, setIsDarkMode] = useState(\n    localStorage.getItem('theme')\n      ? localStorage.getItem('theme') === 'dark'\n      : prefersDarkMode\n      ? true\n      : false\n  )\n  const [successAlert, setSuccessAlert] = useState('')\n  const [isRevealing, setIsRevealing] = useState(false)\n  const [guesses, setGuesses] = useState<string[]>(() => {\n    const loaded = loadGameStateFromLocalStorage()\n    if (loaded?.esolution !== esolution) {\n      return []\n    }\n    const gameWasWon = loaded.guesses.includes(esolution)\n    if (gameWasWon) {\n      setIsGameWon(true)\n    }\n    if (loaded.guesses.length === MAX_CHALLENGES && !gameWasWon) {\n      setIsGameLost(true)\n    }\n    return loaded.guesses\n  })\n\n  const [stats, setStats] = useState(() => loadStats())\n/*\n  const [isHardMode, setIsHardMode] = useState(\n    localStorage.getItem('gameMode')\n      ? localStorage.getItem('gameMode') === 'hard'\n      : false\n  )\n  */\n\n  const [isMissingPreviousLetters, setIsMissingPreviousLetters] =\n    useState(false)\n  const [missingLetterMessage, setIsMissingLetterMessage] = useState('')\n\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark')\n    } else {\n      document.documentElement.classList.remove('dark')\n    }\n  }, [isDarkMode])\n\n  const handleDarkMode = (isDark: boolean) => {\n    setIsDarkMode(isDark)\n    localStorage.setItem('theme', isDark ? 'dark' : 'light')\n  }\n/*\n  const handleHardMode = (isHard: boolean) => {\n    setIsHardMode(isHard)\n    localStorage.setItem('gameMode', isHard ? 'hard' : 'normal')\n  }\n*/\n  useEffect(() => {\n    saveGameStateToLocalStorage({ guesses, esolution })\n  }, [guesses])\n\n  useEffect(() => {\n    if (isGameWon) {\n      setTimeout(() => {\n        setSuccessAlert(\n          WIN_MESSAGES[Math.floor(Math.random() * WIN_MESSAGES.length)]\n        )\n\n        setTimeout(() => {\n          setSuccessAlert('')\n          setIsStatsModalOpen(true)\n        }, ALERT_TIME_MS)\n      }, REVEAL_TIME_MS * MAX_WORD_LENGTH)\n    }\n    if (isGameLost) {\n      setTimeout(() => {\n         setIsStatsModalOpen(true)\n      }, GAME_LOST_INFO_DELAY)\n    }\n  }, [isGameWon, isGameLost])\n\n  const onChar = (value: string) => {\n    if (\n      currentGuess.length < MAX_WORD_LENGTH &&\n      guesses.length < MAX_CHALLENGES &&\n      !isGameWon\n    ) {\n      setCurrentGuess(`${currentGuess}${value}`)\n    }\n  }\n\n  const onDelete = () => {\n    setCurrentGuess(currentGuess.slice(0, -1))\n  }\n\n  const onEnter = () => {\n      if (isGameWon || isGameLost) {\n      return\n    }\n\n    if (!(currentGuess.length === MAX_WORD_LENGTH)) {\n      setIsNotEnoughLetters(true)\n      return setTimeout(() => {\n        setIsNotEnoughLetters(false)\n      }, ALERT_TIME_MS)\n    }\n\n\n    if (!isInputExpComputable(currentGuess)) {\n      setIsWordNotFoundAlertOpen(true)\n      return setTimeout(() => {\n        setIsWordNotFoundAlertOpen(false)\n      }, ALERT_TIME_MS)\n    }\n\n    /*\n    // enforce hard mode - all guesses must contain all previously revealed letters\n    if (isHardMode) {\n      const firstMissingReveal = findFirstUnusedReveal(currentGuess, guesses)\n      if (firstMissingReveal) {\n        setIsMissingLetterMessage(firstMissingReveal)\n        setIsMissingPreviousLetters(true)\n        return setTimeout(() => {\n          setIsMissingPreviousLetters(false)\n        }, ALERT_TIME_MS)\n      }\n    }\n    */\n\n    setIsRevealing(true)\n    // turn this back off after all\n    // chars have been revealed\n    setTimeout(() => {\n      setIsRevealing(false)\n    }, REVEAL_TIME_MS * MAX_WORD_LENGTH)\n\n    const winningWord = isWinningExp(currentGuess)\n\n    if (\n      currentGuess.length === MAX_WORD_LENGTH &&\n      guesses.length < MAX_CHALLENGES &&\n      !isGameWon\n    ) {\n      setGuesses([...guesses, currentGuess])\n      setCurrentGuess('')\n\n      if (winningWord) {\n        setStats(addStatsForCompletedGame(stats, guesses.length))\n        return setIsGameWon(true)\n      }\n\n\n      if (guesses.length === MAX_CHALLENGES - 1) {\n        setStats(addStatsForCompletedGame(stats, guesses.length + 1))\n        setIsGameLost(true)\n      }\n\n    }\n  }\n\n  return (\n    <div className=\"pt-2 pb-8 max-w-7xl mx-auto sm:px-6 lg:px-8\">\n      <div className=\"flex w-80 mx-auto items-center mb-8 mt-20\">\n        <h1 className=\"text-xl ml-2.5 grow font-bold dark:text-white\">\n          {GAME_TITLE}\n        </h1>\n        <InformationCircleIcon\n          className=\"h-6 w-6 mr-2 cursor-pointer dark:stroke-white\"\n          onClick={() => setIsInfoModalOpen(true)}\n        />\n\n      </div>\n      <Grid\n        guesses={guesses}\n        currentGuess={currentGuess}\n        isRevealing={isRevealing}\n      />\n      <Keyboard\n        onChar={onChar}\n        onDelete={onDelete}\n        onEnter={onEnter}\n        guesses={guesses}\n        isRevealing={isRevealing}\n      />\n      <InfoModal\n        isOpen={isInfoModalOpen}\n        handleClose={() => setIsInfoModalOpen(false)}\n      />\n\n      <StatsModal\n        isOpen={isStatsModalOpen}\n        handleClose={() => setIsStatsModalOpen(false)}\n        guesses={guesses}\n        gameStats={stats}\n        isGameLost={isGameLost}\n        isGameWon={isGameWon}\n        handleShare={() => {\n          setSuccessAlert(GAME_COPIED_MESSAGE)\n          return setTimeout(() => setSuccessAlert(''), ALERT_TIME_MS)\n        }}\n\n      />\n\n      <AboutModal\n        isOpen={isAboutModalOpen}\n        handleClose={() => setIsAboutModalOpen(false)}\n      />\n      {/*\n      <SettingsModal\n        isOpen={isSettingsModalOpen}\n        handleClose={() => setIsSettingsModalOpen(false)}\n        isHardMode={isHardMode}\n        handleHardMode={handleHardMode}\n        isDarkMode={isDarkMode}\n        handleDarkMode={handleDarkMode}\n      />\n      */}\n\n      <button\n        type=\"button\"\n        className=\"mx-auto mt-8 flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 select-none\"\n        onClick={() => setIsAboutModalOpen(true)}\n      >\n        {ABOUT_GAME_MESSAGE}\n      </button>\n\n      <Alert message={NOT_ENOUGH_LETTERS_MESSAGE} isOpen={isNotEnoughLetters} />\n      <Alert\n        message={WORD_NOT_FOUND_MESSAGE}\n        isOpen={isWordNotFoundAlertOpen}\n      />\n      <Alert message={missingLetterMessage} isOpen={isMissingPreviousLetters} />\n      <Alert\n        message={CORRECT_WORD_MESSAGE(esolution)}\n        isOpen={isGameLost && !isRevealing}\n      />\n      <Alert\n        message={successAlert}\n        isOpen={successAlert !== ''}\n        variant=\"success\"\n        topMost={true}\n      />\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}