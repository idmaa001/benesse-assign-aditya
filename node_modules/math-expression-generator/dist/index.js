module.exports=function(t){var r={};function n(e){if(r[e])return r[e].exports;var o=r[e]={i:e,l:!1,exports:{}};return t[e].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=r,n.d=function(t,r,e){n.o(t,r)||Object.defineProperty(t,r,{enumerable:!0,get:e})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,r){if(1&r&&(t=n(t)),8&r)return t;if(4&r&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(n.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&r&&"string"!=typeof t)for(var o in t)n.d(e,o,function(r){return t[r]}.bind(null,o));return e},n.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(r,"a",r),r},n.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},n.p="",n(n.s=5)}([function(t,r,n){var e=n(2),o={},u=0;t.exports=function(t){var r;return t>u&&(o=e(r=t),u=r),!!o[t]}},function(t,r,n){(function(r){var n=1/0,e=9007199254740991,o=1.7976931348623157e308,u=NaN,f=4294967295,c="[object Arguments]",a="[object Function]",i="[object GeneratorFunction]",l="[object Map]",s="[object Set]",I="[object String]",h="[object Symbol]",v=/^\s+|\s+$/g,p=/^[-+]0x[0-9a-f]+$/i,d=/^0b[01]+$/i,b=/^\[object .+?Constructor\]$/,O=/^0o[0-7]+$/i,y=/^(?:0|[1-9]\d*)$/,g="[\\ud800-\\udfff]",M="[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]",j="\\ud83c[\\udffb-\\udfff]",T="[^\\ud800-\\udfff]",N="(?:\\ud83c[\\udde6-\\uddff]){2}",S="[\\ud800-\\udbff][\\udc00-\\udfff]",A="(?:"+M+"|"+j+")"+"?",m="[\\ufe0e\\ufe0f]?"+A+("(?:\\u200d(?:"+[T,N,S].join("|")+")[\\ufe0e\\ufe0f]?"+A+")*"),D="(?:"+[T+M+"?",M,N,S,g].join("|")+")",P=RegExp(j+"(?="+j+")|"+D+m,"g"),x=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0\\ufe0e\\ufe0f]"),w=parseInt,C="object"==typeof r&&r&&r.Object===Object&&r,L="object"==typeof self&&self&&self.Object===Object&&self,U=C||L||Function("return this")();function V(t,r){return function(t,r){for(var n=-1,e=t?t.length:0,o=Array(e);++n<e;)o[n]=r(t[n],n,t);return o}(r,function(r){return t[r]})}function _(t){var r=-1,n=Array(t.size);return t.forEach(function(t,e){n[++r]=[e,t]}),n}function R(t){var r=-1,n=Array(t.size);return t.forEach(function(t){n[++r]=t}),n}function $(t){return function(t){return x.test(t)}(t)?function(t){return t.match(P)||[]}(t):function(t){return t.split("")}(t)}var E,B,k,q=Function.prototype,F=Object.prototype,W=U["__core-js_shared__"],z=(E=/[^.]+$/.exec(W&&W.keys&&W.keys.IE_PROTO||""))?"Symbol(src)_1."+E:"",G=q.toString,H=F.hasOwnProperty,J=F.toString,K=RegExp("^"+G.call(H).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Q=U.Symbol,X=Q?Q.iterator:void 0,Y=F.propertyIsEnumerable,Z=Math.floor,tt=(B=Object.keys,k=Object,function(t){return B(k(t))}),rt=Math.random,nt=dt(U,"DataView"),et=dt(U,"Map"),ot=dt(U,"Promise"),ut=dt(U,"Set"),ft=dt(U,"WeakMap"),ct=yt(nt),at=yt(et),it=yt(ot),lt=yt(ut),st=yt(ft);function It(t,r){var n=Mt(t)||function(t){return function(t){return St(t)&&jt(t)}(t)&&H.call(t,"callee")&&(!Y.call(t,"callee")||J.call(t)==c)}(t)?function(t,r){for(var n=-1,e=Array(t);++n<t;)e[n]=r(n);return e}(t.length,String):[],e=n.length,o=!!e;for(var u in t)!r&&!H.call(t,u)||o&&("length"==u||Ot(u,e))||n.push(u);return n}function ht(t){return!(!Nt(t)||(r=t,z&&z in r))&&(Tt(t)||function(t){var r=!1;if(null!=t&&"function"!=typeof t.toString)try{r=!!(t+"")}catch(t){}return r}(t)?K:b).test(yt(t));var r}function vt(t){if(n=(r=t)&&r.constructor,e="function"==typeof n&&n.prototype||F,r!==e)return tt(t);var r,n,e,o=[];for(var u in Object(t))H.call(t,u)&&"constructor"!=u&&o.push(u);return o}function pt(t,r){return t+Z(rt()*(r-t+1))}function dt(t,r){var n=function(t,r){return null==t?void 0:t[r]}(t,r);return ht(n)?n:void 0}var bt=function(t){return J.call(t)};function Ot(t,r){return!!(r=null==r?e:r)&&("number"==typeof t||y.test(t))&&t>-1&&t%1==0&&t<r}function yt(t){if(null!=t){try{return G.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function gt(t,r,e){var f,c,a,i=-1,b=function(t){if(!t)return[];if(jt(t))return function(t){return"string"==typeof t||!Mt(t)&&St(t)&&J.call(t)==I}(t)?$(t):function(t,r){var n=-1,e=t.length;for(r||(r=Array(e));++n<e;)r[n]=t[n];return r}(t);if(X&&t[X])return function(t){for(var r,n=[];!(r=t.next()).done;)n.push(r.value);return n}(t[X]());var r=bt(t);return(r==l?_:r==s?R:At)(t)}(t),y=b.length,g=y-1;for((e?function(t,r,n){if(!Nt(n))return!1;var e=typeof r;return!!("number"==e?jt(n)&&Ot(r,n.length):"string"==e&&r in n)&&function(t,r){return t===r||t!=t&&r!=r}(n[r],t)}(t,r,e):void 0===r)?r=1:(f=function(t){var r=function(t){if(!t)return 0===t?t:0;if((t=function(t){if("number"==typeof t)return t;if(function(t){return"symbol"==typeof t||St(t)&&J.call(t)==h}(t))return u;if(Nt(t)){var r="function"==typeof t.valueOf?t.valueOf():t;t=Nt(r)?r+"":r}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(v,"");var n=d.test(t);return n||O.test(t)?w(t.slice(2),n?2:8):p.test(t)?u:+t}(t))===n||t===-n){var r=t<0?-1:1;return r*o}return t==t?t:0}(t),e=r%1;return r==r?e?r-e:r:0}(r),c=0,a=y,f==f&&(void 0!==a&&(f=f<=a?f:a),void 0!==c&&(f=f>=c?f:c)),r=f);++i<r;){var M=pt(i,g),j=b[M];b[M]=b[i],b[i]=j}return b.length=r,b}(nt&&"[object DataView]"!=bt(new nt(new ArrayBuffer(1)))||et&&bt(new et)!=l||ot&&"[object Promise]"!=bt(ot.resolve())||ut&&bt(new ut)!=s||ft&&"[object WeakMap]"!=bt(new ft))&&(bt=function(t){var r=J.call(t),n="[object Object]"==r?t.constructor:void 0,e=n?yt(n):void 0;if(e)switch(e){case ct:return"[object DataView]";case at:return l;case it:return"[object Promise]";case lt:return s;case st:return"[object WeakMap]"}return r});var Mt=Array.isArray;function jt(t){return null!=t&&function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=e}(t.length)&&!Tt(t)}function Tt(t){var r=Nt(t)?J.call(t):"";return r==a||r==i}function Nt(t){var r=typeof t;return!!t&&("object"==r||"function"==r)}function St(t){return!!t&&"object"==typeof t}function At(t){return t?V(t,function(t){return jt(t)?It(t):vt(t)}(t)):[]}t.exports=function(t){return gt(t,f)}}).call(this,n(4))},function(t,r,n){var e=n(3);t.exports=function(t){return e(t+1).reduce(function(t,r){return t[r]=!0,t},{})}},function(t,r,n){!function(n){"use strict";function e(t){for(var r=[],n=[],e=2,o=t;o--;)r[t-o]=!0;for(e=2;e<Math.sqrt(t);e++)if(r[e])for(var u=e+e;u<t;u+=e)r[u]=!1;for(var f=2;f<t;f++)r[f]&&n.push(f);return n}t.exports&&(r=t.exports=e),r.sieveOfErathosthenes=e}()},function(t,r){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,r,n){"use strict";var e;n.r(r),function(t){t.DIVISION="/",t.MULTIPLICATION="*",t.ADDITION="+",t.SUBTRACTION="-"}(e||(e={}));var o=e;var u=t=>{let r=[];return t?Object.keys(t).forEach(n=>{t[n]&&r.push(n)}):r=[o.ADDITION,o.SUBTRACTION,o.MULTIPLICATION,o.DIVISION],r.length?r[Math.floor(Math.random()*r.length)]:o.ADDITION};var f=(t,r)=>Math.floor(Math.random()*(r-t+1))+t;var c=t=>{if(0===t)return[0,0];if(t>0){const r=f(1,t-1);return[r,t-r]}const r=f(t+Math.floor(t/2),-1);return[r,t-r]},a=n(0);var i=t=>{const r=[],n=[],e=Math.sqrt(t);for(let o=1;o<e+1&&o!==n[n.length-1];o++)t%o!=0||1!==t&&!a(t)&&1===o||(r.push(o),t/o===o||1!==t&&!a(t)&&t===o||n.push(t/o));return r.concat(n)};var l=t=>{if(0===t)return[0,0];if(t>0){const r=i(t);if(!r.length)return[0,0];const n=r[Math.floor(Math.random()*r.length)];return[n,t/n]}const r=i(-t);if(!r.length)return[0,0];const n=r[Math.floor(Math.random()*r.length)]*(1===f(1,2)?1:-1);return[n,t/n]};var s=t=>{if(0===t)return[0,0];if(t>0){const r=Math.floor(Math.sqrt(t)),n=f(2,r),e=t*n;return n/e===t?[n,e]:[e,n]}const r=Math.floor(Math.sqrt(-t)),n=f(2,r)*(1===f(1,2)?-1:1),e=t*n;return n/e===t?[n,e]:[e,n]};var I=t=>{if(0===t)return[0,0];if(t>0){const r=f(1,Math.floor(Math.sqrt(t))),n=r+t;return r-n===t?[r,n]:[n,r]}const r=f(t,-t),n=r+t;return r-n===t?[r,n]:[n,r]};var h=(t,r)=>r===o.ADDITION?c(t):r===o.SUBTRACTION?I(t):r===o.MULTIPLICATION?l(t):s(t);var v=(t,r)=>{const n=u(r),e=h(t,n);return[e[0],n,e[1]]};var p=(t,r,n,e)=>({[o.DIVISION]:1!==t&&-1!==t&&(!n&&!e||n!==o.DIVISION&&r&&!e||!n&&!e),[o.MULTIPLICATION]:1!==t&&-1!==t&&n!==o.DIVISION&&(!!n||!!e||!a(t)&&1!==t&&-1!==t),[o.ADDITION]:1!==t&&-1!==t&&(!n&&!e||n!==o.DIVISION&&n!==o.SUBTRACTION&&n!==o.MULTIPLICATION&&e!==o.DIVISION&&e!==o.MULTIPLICATION),[o.SUBTRACTION]:!n&&!e||n!==o.DIVISION&&n!==o.MULTIPLICATION&&e!==o.DIVISION&&e!==o.MULTIPLICATION&&n!==o.SUBTRACTION});const d=(t,r,n,e,u)=>{const c=p(t,u,n,e),a=v(t,c),i=[...a];if(r>2){const t=0===(a[1]===o.DIVISION||a[1]===o.SUBTRACTION||e===o.DIVISION?0:f(0,1)),u=d(a[t?0:2],--r,t?n:a[1],t?a[1]:e,t);return t?u.concat(i.slice(1)):i.slice(0,i.length-1).concat(u)}return i};var b=d;var O=({length:t,target:r})=>b(r,t),y=n(1);const g=(t,r)=>{let n=0,e=0;for(;0===n;)n=Math.random();for(;0===e;)e=Math.random();let o=Math.sqrt(-2*Math.log(n))*Math.cos(2*Math.PI*e);return((o=o/10+.5)>1||o<0)&&(o=g(t,r)),o*=r-t,o+=t,Math.round(o)};var M=g;var j=(t,r)=>{let n=[t];for(;n.length<2*r-1;){const t=2*M(0,(n.length+1)/2-1),r=n[t],e=u(p(r)),[o,f]=h(r,e);n=[...n.slice(0,t),o,e,f,...n.slice(t+1)]}return y(n)};n.d(r,"generateExpression",function(){return T}),n.d(r,"generateBag",function(){return j});const T=O}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,